/**\file X:\projects\RemoteMonitor\\RemoteMonitorClient\protocol.h
 * \brief the communication protocol headfile, this file is automatically generated from interface.dll
 */

#pragma once
#include "BaseType.h"
#include "BinaryStream.h"
#include <vector>
#include <string>

using namespace std;

namespace Protocol
{
#pragma pack(push)
#pragma pack(1)


struct ClientData
{
	string	Name;
	Int32	CPU;
	Int64	IdleTime;
	Int64	KernelTime;
	Int64	UserTime;
	Int64	CommitTotal;
	Int64	CommitLimit;
	Int64	CommitPeak;
	Int64	PhysicalTotal;
	Int64	PhysicalAvailable;
	Int64	SystemCache;
	Int64	KernelTotal;
	Int64	KernelPaged;
	Int64	KernelNonpaged;
	Int32	PageSize;
	Int32	HandleCount;
	Int32	ProcessCount;
	Int32	ThreadCount;

	//serialization support
	static Error Read(BinaryStreamOut& stream, ClientData** data);
	static void Write(BinaryStreamIn& stream, const ClientData* data);
};

interface IRemoteMonitor
{
	virtual Error UpdateData(ClientData* data) = 0;

	static bool CheckProtocol(int id, int version){ return id == 1218100815 && version == 1; }
	static Error ParseAndInvoke(IRemoteMonitor* service, BYTE* data, int length, BinaryStreamIn* retStream);
};

interface IRemoteMonitorMarshaling
{
	static void UpdateData(BinaryStreamIn* stream, ClientData* data);
	static void InitProtocol(BinaryStreamIn* stream)
	{
		stream->AddValue(8);
		stream->AddValue(1218100815);
		stream->AddValue(1);
	}
};

#pragma pack(pop)
};

using namespace Protocol;
